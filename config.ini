###############################################################################
#  Borg Backups Time Configuration File
###############################################################################
#  This file contains all configuration options available. All default values
#  are commented out.
#  This file supports cross-referencing values by ${key} or ${othersection:key}.


###############################################################################
#  Global Settings
###############################################################################
[logging]
#  where to place log files
#log_dir: .

#  how to name log files
#log_file: BorgBackupTimer.log

#  rotating log: maximum size of one log file in bytes
#log_max_bytes: 524288

#  rotating log: how many backups to keep
#log_backup_count: 3

#  set log level, options are CRITCAL, ERROR, WARNING, INFO, DEBUG
#log_level: INFO

[main]
#  how often to check if there is work to do
#check_interval: 300

#  command to run for displaying borg output data in the form of temporary text
#  files
#graphical_editor: gedit


###############################################################################
#  Borg Backups to run
#  backups are defined by creating a section with a prefix 'backup_'
###############################################################################

#  This is an example backup_mydata, to prevent it from being accidentally run,
#  the name is prefixed with a #.
#  Required parameters are left empty, optional ones are commented out and
#  given with their default value

[#backup_mydata]
#  File to store timestamp of last backup execution, this is created when
#  non-existent on first run.
#  Example: /home/username/backup/borg_music.txt
timestamp_file: 

#  Interval in which the backup should be run once, in seconds
interval: 

#  Backup host, may be domain name/ip or localhost
#  This is pinged to check if backup can be run.
#  If possible, set this to actual server with borg repository
host: 

#  Borg repository, given in borg command syntax
#  Example: ssh://foo@${host}:5022/~/backup_repo
#  Example: ssh://user@backuphost.example:backups/user/borg_repo
#  Example: /home/user/backup/borg_repo
borg_repo: 

#  Borg RSH: command used instead of ssh
#  This is normally used to supply ssh with additional parameters, such as -i,
#  e.g. to change the identity file used to login. This may be useful in
#  automating the backup.
#  Example: ssh -i /home/user/backup/backup_id_rsa
#borg_rsh: ssh

#  Archive name template for archive created with borg create
#  This string is parsed using python3's strftime with the current time before
#  being used as an archive name.
#  See: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior
#borg_archive_name_template: %Y-%m-%d_%H-%M-%S

#  Passphrase for the given borg repository
borg_passphrase: 

#  This script automatically runs a borg prune after every successful borg
#  create. Here you can supply all arguments to borg prune, that should be
#  used.
#  Example: --keep-hourly 12 --keep-daily 7 --keep-weekly 4 --keep-monthly 12
borg_prune_args: 

#  In case there is extra arguments you want to supply to borg when running
#  borg create, you can supply them here
#borg_args:

#  In case there is extra arguments you want to supply to borg when running
#  borg list, you can supply them here
#borg_list_args:

#  By default, borg create and borg list are run with --stats to have a nice
#  output for the logs. You can change that here
#borg_stats: yes

#  Supply all directories to be backed up here
#  Example: /home/user/music
#  Example: /home/user/important_stuff /home/user/music
backup_directories: 

#  Restrict this backup to only run, when in certain environments. If this is
#  set to no, it will always run, provided there is a connection to the backup
#  host.
#restrict_to_environments: no
#  Specify allowed environments here. This is only necessary if
#  restrict_to_environments is enabled
#  Example: env_myhome
#  Example: env_myhome env_myoffice
#allowed_environments: 


###############################################################################
#  Environments
#  environments are defined by creating a section with a prefix 'env_'
###############################################################################

#  An environment is nothing but a set of rules/requirements that need to be
#  satisfied in order for this environment to be "valid".
#  This way it is possible to run borg only in known places, e.g. at your home
#  and office.

#  This is an example environment env_myhome, to prevent it from being
#  accidentally parsed, the name is prefixed with a #.
#  Required parameters are left empty, optional ones are commented out and
#  given with their default value

[#env_myhome]
#  Match the local ip address to a given regex. The comparison is done with
#  python re's fullmatch.
#  Example: 192\.168\.178\.\d{1,3}
#match_ip_address: .+

#  Specify hosts, that need to be successfully pinged.
#  Example: local_server
#  Example: nas 192.168.0.100
#  Example: 10.0.0.22
#ping_hosts: 

#  Allow wifi to be the type of connection. match_ssid can then be used to
#  specify what SSIDs are allowed.
#allow_wifi: no

#  Specify regex that needs to be matched with the SSID currently connected to.
#  Example: HomeWifi
#  Example: HomeWifi|WorkWifi
#  Example: .+_specialsuffix
#match_ssid: .+

#  Allow other (not wifi) to be the type of connection (e.g. ethernet).
#allow_other: no
